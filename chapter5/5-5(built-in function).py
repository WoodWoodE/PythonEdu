#내장함수

# abs(x) : absolute(absolute value - 절대값을 의미) - 절대값을 리턴한다.
print("{0:=^40}".format("abs(x)"))

print(abs(3))
print(abs(-4))

######################################################################################################################################################

# all(x) : 반복 가능한 데이터 x를 입력값으로 받으며 이 x의 요소가 모두 참이면 True, 거짓이 하나라도 있으면 False를 리턴한다.
print("{0:=^40}".format("all(x)"))

iterTrueL = [1, 2, 3] #리스트 변수 - 전체가 True
iterTrueT = (1, 2, 3) #튜플 변수 - 전체가 True
iterTrueD = {1:1, 2:2, 3:3} #딕셔너리 변수 - 전체가 True

iterFalseL = [1, 0, 3] #리스트 변수 - False가 있는 경우
iterFalseT = (1, 2, 0) #튜플 변수 - False가 있는 경우
iterFalseD = {1:1, 2:2, False:True} #딕셔너리 변수 - False가 있는 경우 (딕셔너리의 요소중 False로 인식하는것은 key값에 한정되는 것으로 보임 0:값 , False:값)

print(all(iterTrueL))
print(all(iterTrueT))
print(all(iterTrueD))

print(all(iterFalseL))
print(all(iterFalseT))
print(all(iterFalseD))

######################################################################################################################################################

# all의 입력 인수가 빈 값인 경우에는 True를 리턴한다.
print(all([]))
print(all(()))
print(all({}))

######################################################################################################################################################

# any(x) : 반복 가능한 데이터 x를 입력으로 받아 x의 요소 중 하나라도 참이 있으면 True를 리턴하고 x가 모두 거짓일 때만 False를 리턴한다. 즉, all(x)의 반대로 작동한다.
print("{0:=^40}".format("any(x)"))

iterTrueL = [1, 2, 3] #리스트 변수 - 전체가 True
iterTrueT = (1, 2, 3) #튜플 변수 - 전체가 True
iterTrueD = {1:1, 2:2, 3:3} #딕셔너리 변수 - 전체가 True

iterPartFalseL = [1, 0, 3] #리스트 변수 - False가 있는 경우
iterPartFalseT = (1, 2, 0) #튜플 변수 - False가 있는 경우
iterPartFalseD = {1:1, 2:2, False:True} #딕셔너리 변수 - False가 있는 경우 (딕셔너리의 요소중 False로 인식하는것은 key값에 한정되는 것으로 보임 0:값 , False:값)

iterAllFalseL = [0, 0, 0] #리스트 변수  - 모든 요소가 False인 경우 
iterAllFalseT = (False, [], {}) #튜플 변수  - 모든 요소가 False인 경우 
iterAllFalseD = {False:1, 0:2, False:True} #딕셔너리 변수 - 모든 요소가 False인 경우 

print(any(iterTrueL))
print(any(iterTrueT))
print(any(iterTrueD))

print(any(iterPartFalseL))
print(any(iterPartFalseT))
print(any(iterPartFalseD))

print(any(iterAllFalseL))
print(any(iterAllFalseT))
print(any(iterAllFalseD))

######################################################################################################################################################

# any의 입력 인수가 빈 값인 경우에는 False를 리턴한다.
print(any([]))
print(any(()))
print(any({}))

######################################################################################################################################################

# chr(i) : 유니코드 숫자 값을 입력받아 그 코드에 해당하는 문자를 리턴하는 함수이다.
print("{0:=^40}".format("chr(i)"))

print(chr(97))
print(chr(44032))

######################################################################################################################################################

# dir(): 객체가 지닌 변수나 함수를 보여 주는 함수
print("{0:=^40}".format("dir(Obj)"))
print(dir([])) # 리스트 객체가 사용 가능한 변수, 함수
print(dir(())) # 튜플 객체가 사용 가능한 변수, 함수
print(dir({1:0, 2:1, 3:3})) # 딕셔너리 객체가 사용 가능한 변수, 함수
print(dir({1, 2, 3})) # 집합 객체가 사용 가능한 변수, 함수

######################################################################################################################################################

# divmod(a, b) : 2개의 숫자 a, b를 입력으로 받는 후 a를 b로 나눈 몫과 나머지를 튜플로 리턴한다.
print("{0:=^40}".format("divmod(a, b)"))
print(divmod(4,2))
print(divmod(3,2))

######################################################################################################################################################

# enumerate() : ‘열거하다’라는 뜻으로 순서가 있는 데이터(리스트, 튜플, 문자열)를 입력으로 받아 인덱스 값을 포함하는 enumerate 객체를 리턴한다.
print("{0:=^40}".format("enumerate()"))

print(enumerate([1, 2, 3])) # => enumerate 객체를 반환하기에 주소값을 알려준다 => <enumerate object at 0x0000017BB7BBFF00>

#   보통 enumerate 함수는 for 문과 함께 사용한다.

for i, num in enumerate([1, 2, 3]) :
    print("i :", i)
    print("num :", num)
    
#   인덱스 값과 함께 body, foo, bar가 순서대로 출력되었다. 즉, enumerate를 for 문과 함께 사용하면 자료형의 현재 순서index와 그 값을 쉽게 알 수 있다.
#   for 문처럼 반복되는 구간에서 객체가 현재 어느 위치에 있는지 알려 주는 인덱스 값이 필요할 때 enumerate 함수를 사용하면 매우 유용하다.

######################################################################################################################################################

# eval(expression) : 문자열로 구성된 표현식을 입력으로 받아 해당 문자열을 실행한 결괏값을 리턴하는 함수이다.
print("{0:=^40}".format("eval(expression)"))

print(eval("1 + 2"))
print(eval("'Te' + 'st'"))
print(eval("divmod(4,3)"))

######################################################################################################################################################

# filter(함수, 반복_가능한_데이터) : ‘무엇인가를 걸러 낸다’라는 뜻으로, filter 함수도 이와 비슷한 기능을 한다.
print("{0:=^40}".format("filter(함수, 반복_가능한_데이터)"))

#   filter 함수는 첫 번째 인수로 함수, 두 번째 인수로 그 함수에 차례로 들어갈 반복 가능한 데이터를 받는다. 
#   그리고 반복 가능한 데이터의 요소 순서대로 함수를 호출했을 때 리턴값이 참인 것만 묶어서(걸러 내서) filter 객체의 형태로 리턴한다.
#   보통 이걸 형변환해서 사용하면 된다.

# 배열을 받아서 양수만 걸러내주는 함수이다.

def positive(l): 
    result = [] 
    for i in l: 
        if i > 0: 
            result.append(i) 
    return result

print(positive([1,-3,2,0,-5,6]))

# 이를 filter를 사용하면 더 간단하게 작성이 가능하다.

def positive(i):
    return i > 0 # return 값이 참임을 확인하면 해당 값(i)을 filter가 반환한다.

print(filter(positive, [1,-3,2,0,-5,6])) # => <filter object at 0x000002472B18FD30>
print(list(filter(positive, [1,-3,2,0,-5,6])))    

# 이 예제는 lambda를 사용하면 더욱 간단해진다.

# lambda 사용법
# 함수명 = lambda 매개변수 : return값 

print(list(filter(lambda i : i > 0, [1,-3,2,0,-5,6])))

######################################################################################################################################################

# hex(x) : 정수를 입력받아 16진수(hexadecimal) 문자열로 변환하여 리턴하는 함수.
print("{0:=^40}".format("hex(x)"))

print(hex(12))
print(hex(54))

######################################################################################################################################################

# id(Obj) : 객체를 입력받아 객체의 고유 주솟값(레퍼런스)을 리턴하는 함수이다.
print("{0:=^40}".format("id(Obj)"))

print(id(3))
print(id(4))
b = [1, 2, 3]
print(id(b))

######################################################################################################################################################

# input([prompt]) : 사용자 입력을 받는 함수이다. 입력 인수로 문자열을 전달하면 그 문자열은 프롬프트가 된다.
print("{0:=^40}".format("input([prompt])"))

# a = input()
# print(a)

# b = input("값을 입력하세요: ")
# print(b)

######################################################################################################################################################

# int(x) : 문자열 형태의 숫자나 소수점이 있는 숫자를 정수로 리턴하는 함수이다. 만약 정수가 입력되면 그대로 리턴한다.
print("{0:=^40}".format("int(x)"))

print(int(5.44))
print(int(3))
print(int(-7.23))

# int(x, radix)는 radix 진수로 표현된 문자열 x를 10진수로 변환하여 리턴한다. 
print(int('11', 2)) # => 문자열 '11'은 2진수로 표현된것으로 인식하고 10진수로 변환한 2진수 11의 값을 반환한다
print(int('1A', 16)) # => 문자열 '1A'는 16진수로 표현된것으로 인식하고 10진수로 변환한 16진수 1A의 값을 반환한다

######################################################################################################################################################

# isinstance(object, class) : 첫 번째 인수로 객체, 두 번째 인수로 클래스를 받는다. 입력으로 받은 객체가 그 클래스의 인스턴스인지를 판단하여 참이면 True, 거짓이면 False를 리턴한다.
print("{0:=^40}".format("isinstance(object, class)"))

class TestClass : pass
a = TestClass()

print(isinstance(a, TestClass))

b = 3 
print(isinstance(b, TestClass))

######################################################################################################################################################

# len(s) : 입력값 s의 길이(요소의 전체 개수)를 리턴하는 함수이다.
print("{0:=^40}".format("len(s)"))

print(len("test"))
print(len("five1"))

######################################################################################################################################################

# list(iterable) : 반복 가능한 데이터를 입력받아 리스트로 만들어 리턴하는 함수이다.
print("{0:=^40}".format("list(iterable)"))

print(list("python"))
print(list((1, 2, 3)))

######################################################################################################################################################

# map(f, iterable) : 함수(f)와 반복 가능한 데이터를 입력으로 받는다. map은 입력받은 데이터의 각 요소에 함수 f를 적용한 결과를 리턴하는 함수이다.
print("{0:=^40}".format("map(f, iterable)"))

print()